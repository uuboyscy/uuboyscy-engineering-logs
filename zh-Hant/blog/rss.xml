<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>UUBOYSCY ENGINEERING LOGS Blog</title>
        <link>https://docs.uuboyscy.dev/zh-Hant/blog</link>
        <description>UUBOYSCY ENGINEERING LOGS Blog</description>
        <lastBuildDate>Fri, 07 Mar 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hant</language>
        <item>
            <title><![CDATA[How to Build a Reliable Data System?]]></title>
            <link>https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system</link>
            <guid>https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system</guid>
            <pubDate>Fri, 07 Mar 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[When your team starts relying on data for daily operations and decision-making, trust becomes the foundation. But what does it mean to “trust the data”? And how do you build a system where data is accurate, timely, and easy to understand?]]></description>
            <content:encoded><![CDATA[<p>When your team starts relying on data for daily operations and decision-making, <strong>trust</strong> becomes the foundation. But what does it mean to “trust the data”? And how do you build a system where data is accurate, timely, and easy to understand?</p>
<p>This article summarizes the ideas I shared in a recent internal tech talk, designed for both engineers and non-engineers alike.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="common-data-pain-points">Common Data Pain Points<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#common-data-pain-points" class="hash-link" aria-label="Common Data Pain Points的直接連結" title="Common Data Pain Points的直接連結">​</a></h2>
<p>Many data teams struggle with issues like:</p>
<ul>
<li>
<p><strong>Inconsistent metrics across dashboards</strong></p>
<blockquote>
<p>“Why does Report A say we have 1203 users, but Report B says 1187?”</p>
</blockquote>
</li>
<li>
<p><strong>Delayed data availability</strong></p>
<blockquote>
<p>“We have a 9 AM daily meeting, but the dashboard only updates at 10 AM.”</p>
</blockquote>
</li>
<li>
<p><strong>Unclear definitions of metrics</strong></p>
<blockquote>
<p>“Does 'active user' mean logged in, or just visited any page?”</p>
</blockquote>
</li>
</ul>
<p>These issues don’t just affect data engineers—they frustrate stakeholders and erode confidence in data-driven decisions.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-we-did-to-fix-it">What We Did to Fix It<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#what-we-did-to-fix-it" class="hash-link" aria-label="What We Did to Fix It的直接連結" title="What We Did to Fix It的直接連結">​</a></h2>
<p>To address these challenges, we introduced a few key strategies:</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-data-validation-and-monitoring">1. Data Validation and Monitoring<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#1-data-validation-and-monitoring" class="hash-link" aria-label="1. Data Validation and Monitoring的直接連結" title="1. Data Validation and Monitoring的直接連結">​</a></h3>
<p>We added <strong>automated data quality checks</strong> and anomaly detection to our ETL pipeline. These checks run before data is published to dashboards or reports, so we can catch issues early.</p>
<ul>
<li>Monitor dependencies on orchestration (Generated by Prefect)
<img decoding="async" loading="lazy" alt="data-validation-and-monitoring-1" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/data-validation-and-monitoring-1-f9bd5adf130e19bfa947187e82c08dfb.png" width="1568" height="416" class="img_ev3q"></li>
<li>Check data lineage (Generated by dbt)
<img decoding="async" loading="lazy" alt="data-validation-and-monitoring-2" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/data-validation-and-monitoring-2-39fb2133a8b1744f7588b4bab8de4353.png" width="1772" height="570" class="img_ev3q"></li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-automation-etl-and-cicd">2. Automation ETL and CI/CD<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#2-automation-etl-and-cicd" class="hash-link" aria-label="2. Automation ETL and CI/CD的直接連結" title="2. Automation ETL and CI/CD的直接連結">​</a></h3>
<p>We treated our data pipeline code just like application code—complete with:</p>
<ul>
<li>Git version control</li>
<li>Code reviews</li>
<li>Automated testing before deployment</li>
</ul>
<p>This helped us reduce manual scripts and improved the stability of our daily data jobs.</p>
<ul>
<li>Monitor scheduling on Orchestration (Screenshot of Prefect)
<img decoding="async" loading="lazy" alt="automation-etl-and-cicd-1" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/automation-etl-and-cicd-1-ab062dfe82d8300be441e496c36df8d8.png" width="1391" height="516" class="img_ev3q"></li>
<li>CI/CD (GitHub Action)
<img decoding="async" loading="lazy" alt="automation-etl-and-cicd-2" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/automation-etl-and-cicd-2-b1ee489666956e059edce89adba4a21e.png" width="1864" height="460" class="img_ev3q"></li>
</ul>
<hr>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-standardized-metric-definitions">3. Standardized Metric Definitions<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#3-standardized-metric-definitions" class="hash-link" aria-label="3. Standardized Metric Definitions的直接連結" title="3. Standardized Metric Definitions的直接連結">​</a></h3>
<p>We unified naming conventions and centralized our metric logic in one place. This way, PM and analysts can talk about data more clearly and easily.</p>
<ul>
<li>Search valid tables (dbt document)
<img decoding="async" loading="lazy" alt="standardize-data-definition-1" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/standardize-data-definition-1-703d056a3c4ffe803abe96f54209746f.png" width="694" height="558" class="img_ev3q"></li>
<li>Table column definition (dbt document)
<img decoding="async" loading="lazy" alt="standardize-data-definition-2" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/standardize-data-definition-2-3803a91c3ed99e53d39a2efca6023d18.png" width="998" height="702" class="img_ev3q"></li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="empowering-non-engineers">Empowering Non-Engineers<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#empowering-non-engineers" class="hash-link" aria-label="Empowering Non-Engineers的直接連結" title="Empowering Non-Engineers的直接連結">​</a></h2>
<p>Improving data quality isn’t just an engineering problem. Here's how <strong>non-technical stakeholders</strong> can help:</p>
<ul>
<li>Understand and apply <strong>basic reasonable checks</strong> (e.g., does the number look unusually high/low?)</li>
<li>Provide <strong>detailed bug reports</strong>, like:<!-- -->
<ul>
<li>Report name</li>
<li>Table name</li>
<li>Filter conditions</li>
<li>Time range affected</li>
</ul>
</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final Thoughts<a href="https://docs.uuboyscy.dev/zh-Hant/blog/how-to-build-a-reliable-data-system#final-thoughts" class="hash-link" aria-label="Final Thoughts的直接連結" title="Final Thoughts的直接連結">​</a></h2>
<p>Data pipelines are not just technical infrastructure, but <strong>products</strong> that require testing, communication, and ownership. The goal isn’t perfection, but progress, one improvement at a time, built on top of <strong>clear processes and collaborative culture</strong>.</p>
<hr>
<p><em>Thanks for reading! If you found this article helpful, feel free to connect with me on <a href="https://www.linkedin.com/in/chengyou-shi/" target="_blank" rel="noopener noreferrer">LinkedIn</a>.</em></p>]]></content:encoded>
            <category>dbt</category>
            <category>Prefect</category>
            <category>CI/CD</category>
            <category>data-governance</category>
        </item>
        <item>
            <title><![CDATA[Modern Data Engineering Milestones: Key Technologies That Shaped the Industry]]></title>
            <link>https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry</link>
            <guid>https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry</guid>
            <pubDate>Thu, 19 Dec 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[In recent years, the field of data engineering has undergone significant transformations. Tools like dbt (data build tool) have emerged as vital components of modern data engineering workflows. These technologies not only optimize how data teams operate but also enable collaboration across diverse roles, including data engineers, analysts, project managers, and stakeholders. This article, based on my experience and a recent talk, explores how data engineering has evolved, why dbt has gained traction, and how it addresses pain points in data workflows.]]></description>
            <content:encoded><![CDATA[<p>In recent years, the field of data engineering has undergone significant transformations. Tools like <strong>dbt (data build tool)</strong> have emerged as vital components of modern data engineering workflows. These technologies not only optimize how data teams operate but also enable collaboration across diverse roles, including data engineers, analysts, project managers, and stakeholders. This article, based on my experience and a recent talk, explores how data engineering has evolved, why dbt has gained traction, and how it addresses pain points in data workflows.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-rise-of-modern-data-engineering">The Rise of Modern Data Engineering<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#the-rise-of-modern-data-engineering" class="hash-link" aria-label="The Rise of Modern Data Engineering的直接連結" title="The Rise of Modern Data Engineering的直接連結">​</a></h2>
<p>Five years ago, data engineering was still a niche role, often disconnected from general software development practices. At that time:</p>
<ul>
<li><strong>Data engineering tasks</strong> were largely centered around managing and processing massive datasets, often from sources like APIs, product databases, or logs.</li>
<li>Distributed storage systems like <strong>Hadoop</strong> were essential for handling these vast data volumes.</li>
<li>Concepts such as unit testing for SQL queries, linting, or conventions were rarely applied in data workflows.</li>
</ul>
<p>However, as data engineering matured, the need for more systematic, scalable, and collaborative approaches became apparent. This paved the way for tools like <strong>dbt</strong>, which integrates software engineering principles into data workflows.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-dbt-and-why-is-it-revolutionary">What is dbt, and Why is it Revolutionary?<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#what-is-dbt-and-why-is-it-revolutionary" class="hash-link" aria-label="What is dbt, and Why is it Revolutionary?的直接連結" title="What is dbt, and Why is it Revolutionary?的直接連結">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="enabling-cross-role-collaboration">Enabling Cross-Role Collaboration<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#enabling-cross-role-collaboration" class="hash-link" aria-label="Enabling Cross-Role Collaboration的直接連結" title="Enabling Cross-Role Collaboration的直接連結">​</a></h3>
<p>dbt’s primary purpose is to bridge the gap between data professionals and other stakeholders by providing a unified interface for understanding and developing data workflows. It enables users to:</p>
<ul>
<li>Trace the lineage of data tables and reports.</li>
<li>Identify dependencies between tables, enabling quick troubleshooting.</li>
<li>Generate comprehensive documentation that’s accessible to technical and non-technical team members.</li>
</ul>
<p>For example, stakeholders can easily view the source tables for a report, understand its transformations, and identify the data’s origin. This level of transparency fosters collaboration and efficiency across teams.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="integrating-testing-and-documentation">Integrating Testing and Documentation<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#integrating-testing-and-documentation" class="hash-link" aria-label="Integrating Testing and Documentation的直接連結" title="Integrating Testing and Documentation的直接連結">​</a></h3>
<p>dbt ensures that data workflows are robust by:</p>
<ol>
<li><strong>Integrating Testing</strong>: Users can define tests for individual fields, such as uniqueness or non-null constraints, directly within dbt configurations. These tests are executed automatically, providing immediate feedback on data quality.</li>
<li><strong>Generating Documentation</strong>: dbt auto-generates documentation based on the SQL logic and configurations provided. This documentation includes:<!-- -->
<ul>
<li>Table definitions.</li>
<li>Column descriptions.</li>
<li>Test details.</li>
</ul>
</li>
</ol>
<p>The resulting documentation is displayed in an intuitive, web-based interface, making it accessible to all stakeholders.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="historical-context-data-engineering-evolution">Historical Context: Data Engineering Evolution<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#historical-context-data-engineering-evolution" class="hash-link" aria-label="Historical Context: Data Engineering Evolution的直接連結" title="Historical Context: Data Engineering Evolution的直接連結">​</a></h2>
<p><img decoding="async" loading="lazy" alt="data-engineering-milestones" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/data-engineering-milestones-30ec056080cc46e28cf86127efad361c.png" width="2267" height="591" class="img_ev3q"></p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="traditional-practices">Traditional Practices<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#traditional-practices" class="hash-link" aria-label="Traditional Practices的直接連結" title="Traditional Practices的直接連結">​</a></h3>
<p>In the early stages of data engineering, the focus was primarily on handling raw data sources. These sources often required processing in distributed systems like Hadoop, where:</p>
<ul>
<li>Data engineers managed pipelines to integrate API, database, and log data into centralized storage.</li>
<li>Practices like version control or modular development were less common.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="transition-to-modern-practices">Transition to Modern Practices<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#transition-to-modern-practices" class="hash-link" aria-label="Transition to Modern Practices的直接連結" title="Transition to Modern Practices的直接連結">​</a></h3>
<p>Over the past five years, the field has seen significant advancements:</p>
<ul>
<li><strong>Adoption of Software Engineering Principles</strong>: Modern data engineering incorporates practices like unit testing, code linting, and standardized conventions for SQL development.</li>
<li><strong>Shift Towards Lakehouse Architectures</strong>: The industry has moved away from traditional data warehouses to lakehouse models, which decouple data storage and processing for better scalability and flexibility.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="dbt-in-practice-features-and-workflow">dbt in Practice: Features and Workflow<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#dbt-in-practice-features-and-workflow" class="hash-link" aria-label="dbt in Practice: Features and Workflow的直接連結" title="dbt in Practice: Features and Workflow的直接連結">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="data-lineage-and-visualization">Data Lineage and Visualization<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#data-lineage-and-visualization" class="hash-link" aria-label="Data Lineage and Visualization的直接連結" title="Data Lineage and Visualization的直接連結">​</a></h3>
<p><img decoding="async" loading="lazy" alt="dbt-lineage-graph" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/dbt-lineage-graph-a156f9b27887309e3a6e69d5922fb649.png" width="1647" height="1372" class="img_ev3q">
<a href="https://uuboyscy.github.io/dbt-demo/#!/overview" target="_blank" rel="noopener noreferrer">dbt-sample-repository</a></p>
<p>dbt excels at visualizing data lineage. Consider a use case where a data team wants to understand how a <strong>user_dashboard</strong> table is constructed:</p>
<ol>
<li><strong>Source Tables</strong>: dbt highlights the raw data sources (e.g., logs, databases).</li>
<li><strong>Transformations</strong>: Intermediate tables and their transformation logic are clearly displayed.</li>
<li><strong>Final Outputs</strong>: Dashboards and reports are mapped back to their underlying tables.</li>
</ol>
<p>This visibility ensures that everyone, from data engineers to project managers, can trace the origins and transformations of key datasets.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="modularity-and-scalability">Modularity and Scalability<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#modularity-and-scalability" class="hash-link" aria-label="Modularity and Scalability的直接連結" title="Modularity and Scalability的直接連結">​</a></h3>
<p>dbt promotes modular development through its <strong>modeling layer</strong>:</p>
<ul>
<li>Raw data is first transformed into an <strong>Operational Data Store (ODS)</strong>.</li>
<li>Intermediate tables (e.g., dimensions) are created to consolidate and enrich data.</li>
<li>Finally, specific tables are built for different business units, stored in <strong>Mart schemas</strong>.</li>
</ul>
<p>This layered approach makes it easier to scale workflows while maintaining clarity.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="execution-and-testing">Execution and Testing<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#execution-and-testing" class="hash-link" aria-label="Execution and Testing的直接連結" title="Execution and Testing的直接連結">​</a></h3>
<p>dbt supports command-line operations to build and test models. For example:</p>
<ul>
<li><code>dbt run</code> builds tables based on defined configurations.</li>
<li><code>dbt test</code> executes tests for individual or multiple tables.</li>
</ul>
<p>A simple table configuration:</p>
<div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token key atrule">models</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> </span><span class="token key atrule">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> table_name</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"Something something something..."</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token key atrule">columns</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> </span><span class="token key atrule">name</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> user_id</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token key atrule">description</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"User identifier"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">        </span><span class="token key atrule">data_tests</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> not_null</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> unique</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">          </span><span class="token punctuation" style="color:rgb(248, 248, 242)">-</span><span class="token plain"> </span><span class="token key atrule">relationships</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              </span><span class="token key atrule">to</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> ref('some_ref_table')</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">              </span><span class="token key atrule">field</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> user_id</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="複製程式碼至剪貼簿" title="複製" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>These operations can target specific tables or pipelines, optimizing performance and resource usage.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="industry-adoption-and-use-cases">Industry Adoption and Use Cases<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#industry-adoption-and-use-cases" class="hash-link" aria-label="Industry Adoption and Use Cases的直接連結" title="Industry Adoption and Use Cases的直接連結">​</a></h2>
<p>dbt has been widely adopted by companies across industries. Some notable examples include:</p>
<ul>
<li><strong>Airbnb</strong>: With over 50,000 metrics, Airbnb uses dbt alongside AI to manage their complex data ecosystem.</li>
<li><strong>Dcard</strong>: Dcard mandates that its analysts use dbt for SQL development, highlighting its versatility beyond traditional engineering roles.</li>
</ul>
<p>Other adopters like Gymnasium Education and Facebook have also reported significant gains in productivity and collaboration through dbt.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="challenges-and-future-directions">Challenges and Future Directions<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#challenges-and-future-directions" class="hash-link" aria-label="Challenges and Future Directions的直接連結" title="Challenges and Future Directions的直接連結">​</a></h2>
<p>While dbt has transformed data engineering, there are areas for improvement:</p>
<ul>
<li><strong>Resource Management</strong>: Running <code>dbt run</code> or <code>dbt test</code> on large projects can be resource-intensive. Future enhancements might focus on better optimization and incremental runs.</li>
</ul>
<p>Looking ahead, companies like Airbnb are exploring AI-driven tools to complement dbt, such as automatically generating SQL queries or identifying metrics based on natural language input.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a href="https://docs.uuboyscy.dev/zh-Hant/blog/modern-data-engineering-milestones-key-technologies-that-shaped-the-industry#conclusion" class="hash-link" aria-label="Conclusion的直接連結" title="Conclusion的直接連結">​</a></h2>
<p>The rise of dbt marks a pivotal moment in data engineering, emphasizing collaboration, transparency, and systematic workflows. By integrating software engineering principles into data practices, dbt enables data teams to deliver high-quality datasets and insights at scale. As the industry continues to evolve, tools like dbt will play an increasingly central role in shaping the future of data engineering.</p>
<p>For teams embarking on their dbt journey, understanding its history and features is the first step toward unlocking its potential. Whether you're a data engineer, analyst, or stakeholder, dbt empowers you to navigate and contribute to modern data ecosystems with confidence.</p>]]></content:encoded>
            <category>dbt</category>
            <category>GCP</category>
            <category>AWS</category>
            <category>Airflow</category>
            <category>Prefect</category>
        </item>
        <item>
            <title><![CDATA[From Airflow to Prefect: Choosing the Right Orchestration Tool for Your Workflow]]></title>
            <link>https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow</link>
            <guid>https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow</guid>
            <pubDate>Wed, 23 Aug 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[---]]></description>
            <content:encoded><![CDATA[<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-introduction">1. Introduction<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#1-introduction" class="hash-link" aria-label="1. Introduction的直接連結" title="1. Introduction的直接連結">​</a></h2>
<p>In my role at a traditional company undergoing digital transformation, I faced a common challenge: managing multiple pipelines across Windows and Linux. These pipelines, essential for generating daily dashboard reports, were difficult to monitor, debug, and scale.</p>
<p>While Airflow is a popular choice for orchestration, it didn’t fit well for our diverse team of engineers and analysts. Prefect, on the other hand, addressed our specific needs with its flexibility and user-friendly features.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-the-problem">2. The Problem<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#2-the-problem" class="hash-link" aria-label="2. The Problem的直接連結" title="2. The Problem的直接連結">​</a></h2>
<p>Our challenges included:</p>
<ol>
<li><strong>Manual Execution</strong>: Pipelines on Windows <code>ran manually</code>, while Linux relied on <code>crontab</code>.</li>
<li><strong>Monitoring Issues</strong>: No centralized way to monitor or trace errors.</li>
<li><strong>Complexity for Analysts</strong>: Analysts, skilled in SQL but less in Python, found it hard to contribute.</li>
<li><strong>Scalability</strong>: Adding new workers was cumbersome.</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-why-airflow-wasnt-ideal">3. Why Airflow Wasn’t Ideal<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#3-why-airflow-wasnt-ideal" class="hash-link" aria-label="3. Why Airflow Wasn’t Ideal的直接連結" title="3. Why Airflow Wasn’t Ideal的直接連結">​</a></h2>
<ul>
<li><strong>Steep Learning Curve</strong>: Difficult for non-engineers to understand and use.</li>
<li><strong>Windows Support</strong>: Running Airflow on Windows required workarounds.</li>
<li><strong>Scaling Issues</strong>: Adding workers or scaling pipelines needed manual effort.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-why-prefect-was-the-solution">4. Why Prefect Was the Solution<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#4-why-prefect-was-the-solution" class="hash-link" aria-label="4. Why Prefect Was the Solution的直接連結" title="4. Why Prefect Was the Solution的直接連結">​</a></h2>
<p>Prefect solved our problems by offering:</p>
<ul>
<li><strong>User-Friendly Syntax</strong>: Pythonic workflows easy for both engineers and analysts.</li>
<li><strong>Cross-Platform Support</strong>: Worked seamlessly on both Windows and Linux.</li>
<li><strong>Real-Time Monitoring</strong>: Built-in logging and error handling for quick debugging.</li>
<li><strong>Easy Scaling</strong>: Agents simplified adding more workers as needed.</li>
</ul>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-steps-to-transition">5. Steps to Transition<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#5-steps-to-transition" class="hash-link" aria-label="5. Steps to Transition的直接連結" title="5. Steps to Transition的直接連結">​</a></h2>
<ol>
<li><strong>Analyze Existing Pipelines</strong>: Identify workflows and dependencies.</li>
<li><strong>Set Up Prefect</strong>: Install and configure Prefect for Windows and Linux.</li>
<li><strong>Onboard Analysts</strong>: Train analysts to contribute using SQL-friendly workflows.</li>
<li><strong>Monitor and Debug</strong>: Use Prefect’s UI to track pipeline execution.</li>
<li><strong>Scale When Needed</strong>: Deploy agents for additional capacity.</li>
</ol>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-prefect-vs-airflow">6. Prefect vs. Airflow<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#6-prefect-vs-airflow" class="hash-link" aria-label="6. Prefect vs. Airflow的直接連結" title="6. Prefect vs. Airflow的直接連結">​</a></h2>
<table><thead><tr><th>Feature</th><th>Airflow</th><th>Prefect</th></tr></thead><tbody><tr><td><strong>Ease of Use</strong></td><td>Complex for non-engineers</td><td>Intuitive and Pythonic</td></tr><tr><td><strong>Windows Support</strong></td><td>Limited</td><td>Excellent</td></tr><tr><td><strong>Monitoring</strong></td><td>Manual log tracing</td><td>Built-in tools</td></tr><tr><td><strong>Scalability</strong></td><td>Requires expertise</td><td>Simple agent setup</td></tr></tbody></table>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="7-airflow-code-vs-prefect-code-a-comparison">7. Airflow Code vs. Prefect Code: A Comparison<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#7-airflow-code-vs-prefect-code-a-comparison" class="hash-link" aria-label="7. Airflow Code vs. Prefect Code: A Comparison的直接連結" title="7. Airflow Code vs. Prefect Code: A Comparison的直接連結">​</a></h2>
<p>Below is a side-by-side comparison of the same workflow implemented in <code>Airflow</code> and <code>Prefect</code>.</p>
<ul>
<li>Airflow code:<!-- -->
<div class="language-Python language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> datetime </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> datetime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> timedelta</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> airflow </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> DAG</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> airflow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">operators</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">bash </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> BashOperator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> airflow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">operators</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">python </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> PythonOperator</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">task1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Running Task 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">task2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Running Task 2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Default arguments for the DAG</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">default_args </span><span class="token operator">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'owner'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">'airflow'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'depends_on_past'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'email'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">'your_email@example.com'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'email_on_failure'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'email_on_retry'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token boolean">False</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'retries'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'retry_delay'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"> timedelta</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">minutes</span><span class="token operator">=</span><span class="token number">5</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Define the DAG</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">dag </span><span class="token operator">=</span><span class="token plain"> DAG</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token string" style="color:rgb(255, 121, 198)">'d_02_example_dag_dependency'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    default_args</span><span class="token operator">=</span><span class="token plain">default_args</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    description</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'An example DAG with Python operators'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    schedule</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"* * * * *"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    start_date</span><span class="token operator">=</span><span class="token plain">datetime</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token number">2023</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> </span><span class="token number">1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    catchup</span><span class="token operator">=</span><span class="token boolean">False</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Define the tasks</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">task1_obj </span><span class="token operator">=</span><span class="token plain"> PythonOperator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    task_id</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'task1'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    python_callable</span><span class="token operator">=</span><span class="token plain">task1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    dag</span><span class="token operator">=</span><span class="token plain">dag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">task2_obj </span><span class="token operator">=</span><span class="token plain"> PythonOperator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    task_id</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'task2'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    python_callable</span><span class="token operator">=</span><span class="token plain">task2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    dag</span><span class="token operator">=</span><span class="token plain">dag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">task3_obj </span><span class="token operator">=</span><span class="token plain"> BashOperator</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    task_id</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'task3'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    bash_command</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">'echo "Hello from Task 3!"'</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    dag</span><span class="token operator">=</span><span class="token plain">dag</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token comment" style="color:rgb(98, 114, 164)"># Task dependencies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">task1_obj </span><span class="token operator">&gt;&gt;</span><span class="token plain"> task2_obj</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">task1_obj </span><span class="token operator">&gt;&gt;</span><span class="token plain"> task3_obj</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="複製程式碼至剪貼簿" title="複製" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
<li>Prefect code:<!-- -->
<div class="language-Python language-python codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#F8F8F2;--prism-background-color:#282A36"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-python codeBlock_bY9V thin-scrollbar" style="color:#F8F8F2;background-color:#282A36"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#F8F8F2"><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> prefect </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> flow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">,</span><span class="token plain"> task</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">from</span><span class="token plain"> prefect</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">shell </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">import</span><span class="token plain"> ShellOperation</span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@task</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">task1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Running Task 1"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@task</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">task2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">print</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token string" style="color:rgb(255, 121, 198)">"Running Task 2"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token decorator annotation punctuation" style="color:rgb(248, 248, 242)">@flow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">name</span><span class="token operator">=</span><span class="token string" style="color:rgb(255, 121, 198)">"d_02_example_dag_dependency"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">def</span><span class="token plain"> </span><span class="token function" style="color:rgb(80, 250, 123)">example_flow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Define the tasks</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    t1 </span><span class="token operator">=</span><span class="token plain"> task1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    t2 </span><span class="token operator">=</span><span class="token plain"> task2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    t3 </span><span class="token operator">=</span><span class="token plain"> ShellOperation</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">commands</span><span class="token operator">=</span><span class="token punctuation" style="color:rgb(248, 248, 242)">[</span><span class="token string" style="color:rgb(255, 121, 198)">"echo 'Hello from Task 3!'"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">]</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">run</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    </span><span class="token comment" style="color:rgb(98, 114, 164)"># Set task dependencies</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    t2</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wait_for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    t3</span><span class="token punctuation" style="color:rgb(248, 248, 242)">.</span><span class="token plain">wait_for</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token plain">t1</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain"></span><span class="token keyword" style="color:rgb(189, 147, 249);font-style:italic">if</span><span class="token plain"> __name__ </span><span class="token operator">==</span><span class="token plain"> </span><span class="token string" style="color:rgb(255, 121, 198)">"__main__"</span><span class="token punctuation" style="color:rgb(248, 248, 242)">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#F8F8F2"><span class="token plain">    example_flow</span><span class="token punctuation" style="color:rgb(248, 248, 242)">(</span><span class="token punctuation" style="color:rgb(248, 248, 242)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="複製程式碼至剪貼簿" title="複製" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="key-differences">Key Differences<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#key-differences" class="hash-link" aria-label="Key Differences的直接連結" title="Key Differences的直接連結">​</a></h3>
<table><thead><tr><th>Aspect</th><th>Airflow</th><th>Prefect</th></tr></thead><tbody><tr><td><strong>Setup</strong></td><td>Requires defining a DAG explicitly.</td><td>Uses Python functions and decorators.</td></tr><tr><td><strong>Task Definition</strong></td><td>Separate task objects (Python/Bash).</td><td>Python <code>@task</code> decorator for simplicity.</td></tr><tr><td><strong>Dependency Management</strong></td><td>Explicit with <code>&gt;&gt;</code> and <code>&lt;&lt;</code> operators.</td><td>Handled with <code>.wait_for()</code> or function calls.</td></tr><tr><td><strong>Execution</strong></td><td>Deployed to Airflow Scheduler.</td><td>Runs as a Python script or with Prefect Cloud.</td></tr><tr><td><strong>Cross-Platform Support</strong></td><td>Limited for Windows.</td><td>Cross-platform (Windows/Linux).</td></tr></tbody></table>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="8-conclusion">8. Conclusion<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow#8-conclusion" class="hash-link" aria-label="8. Conclusion的直接連結" title="8. Conclusion的直接連結">​</a></h2>
<p>Prefect’s simplicity, flexibility, and user-friendly design make it ideal for diverse teams and hybrid environments. By transitioning to Prefect, we unified our workflows, empowered analysts, and improved scalability—proving that the right tool can transform the way we work.</p>
<hr>]]></content:encoded>
            <category>GCP</category>
            <category>Airflow</category>
            <category>Prefect</category>
        </item>
        <item>
            <title><![CDATA[From MapReduce to Spark: The Evolution of Big Data Processing]]></title>
            <link>https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing</link>
            <guid>https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing</guid>
            <pubDate>Tue, 23 Aug 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[1. Introduction: Big Data Challenges]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-introduction-big-data-challenges">1. Introduction: Big Data Challenges<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing#1-introduction-big-data-challenges" class="hash-link" aria-label="1. Introduction: Big Data Challenges的直接連結" title="1. Introduction: Big Data Challenges的直接連結">​</a></h2>
<p>Big data means working with very large amounts of information. In one of my jobs, I had to handle 500TB of data and run more than 10,000 SQL queries every day. The old system we used was slow and had many problems, like some tasks taking over 24 hours to finish. In this blog, I will share how I solved these problems by using Spark and making the system faster and better.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-what-is-hadoop-hive-and-mapreduce">2. What is Hadoop Hive and MapReduce?<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing#2-what-is-hadoop-hive-and-mapreduce" class="hash-link" aria-label="2. What is Hadoop Hive and MapReduce?的直接連結" title="2. What is Hadoop Hive and MapReduce?的直接連結">​</a></h2>
<p>Hadoop Hive is a tool that helps process big data using SQL queries. It works with a system called MapReduce, which was great when it was created but has many limits now:</p>
<ul>
<li><strong>Processes One Query at a Time</strong>: It could not run many queries at once.</li>
<li><strong>Very Slow</strong>: Large or complicated tasks took a long time.</li>
<li><strong>Not Efficient</strong>: It used too many resources for simple tasks.</li>
</ul>
<p>In my work, these issues caused delays, and some tasks took more than one day to finish.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-problems-with-the-old-system">3. Problems with the Old System<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing#3-problems-with-the-old-system" class="hash-link" aria-label="3. Problems with the Old System的直接連結" title="3. Problems with the Old System的直接連結">​</a></h2>
<p>The old system was not good enough for our needs:</p>
<ul>
<li><strong>One Query per Task</strong>: Each SQL query was treated as a separate job, wasting resources.</li>
<li><strong>Huge Data Size</strong>: Processing 100TB of data made it even harder.</li>
<li><strong>Long Task Times</strong>: Some pipelines (multiple tasks) ran for over 24 hours.</li>
</ul>
<p>These problems showed we needed a better solution.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-switching-to-spark">4. Switching to Spark<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing#4-switching-to-spark" class="hash-link" aria-label="4. Switching to Spark的直接連結" title="4. Switching to Spark的直接連結">​</a></h2>
<p>Spark is much faster and better than MapReduce for big data processing. It helped solve our problems because:</p>
<ul>
<li><strong>Faster Processing</strong>: Spark processes data in memory, so tasks are much quicker.</li>
<li><strong>Runs Tasks at the Same Time</strong>: Spark can handle many tasks at once, saving time.</li>
<li><strong>Easy to Use</strong>: Spark has a SQL tool that works like Hive, making the switch simple.</li>
</ul>
<p>After replacing MapReduce with Spark, the system became much faster and could handle more work.</p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-how-i-improved-the-system">5. How I Improved the System<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing#5-how-i-improved-the-system" class="hash-link" aria-label="5. How I Improved the System的直接連結" title="5. How I Improved the System的直接連結">​</a></h2>
<p>Switching to Spark was just the first step.
<img decoding="async" loading="lazy" alt="mapreduce-to-spark" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/mapreduce-to-spark-01df7786c62cee2d9c7f4b5ab7ad807b.png" width="2809" height="664" class="img_ev3q"></p>
<p>After that, I focused on restructuring the system to make it even more efficient.Here’s what I did:</p>
<ol>
<li>
<p><strong>Refactored the Program Architecture</strong>: I modified the structure so that a single task could execute multiple SQL queries at the same time. This reduced the overhead of creating separate tasks for each query, saving both time and resources.
<img decoding="async" loading="lazy" alt="single-product-process" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/single-product-process-9da4b8f86fccf6bab7d7ec3ffa9f2b15.png" width="2805" height="1219" class="img_ev3q"></p>
</li>
<li>
<p><strong>Developed an API for SQL Execution</strong>: Since other departments, such as analysts, wanted to use Spark to run SQL but didn’t have programming skills, I created an API called <strong>jobQueue API</strong>. This API allowed them to execute their SQL queries easily:</p>
<ul>
<li>They only needed to know how to make an API request.</li>
<li>They could specify the SQL queries they wanted to execute in the request.</li>
<li>The API handled the processing on Spark, abstracting away all the complexity.</li>
</ul>
<p><img decoding="async" loading="lazy" alt="api-execution-monitor" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/api-execution-monitor-2e06b06e78935cec5aa2bc64bc2c2413.png" width="1226" height="488" class="img_ev3q"></p>
</li>
<li>
<p><strong>Run Tasks Together</strong>: By leveraging Spark’s ability to execute tasks in parallel, I optimized query execution times further, ensuring the system could handle a large number of queries more efficiently.
<img decoding="async" loading="lazy" alt="multiple-product-process" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/multiple-product-process-6c165c6c365c9bbd7d80d5fba7f6b4ca.png" width="2905" height="1659" class="img_ev3q"></p>
</li>
<li>
<p><strong>Monitor Progress</strong>: Spark’s user interface was helpful for tracking task progress and debugging. I used this to ensure everything was running smoothly and to quickly fix any issues.</p>
</li>
</ol>
<p>With these improvements, the system could run 10,000 SQL queries seamlessly within 3 hours. The addition of the <strong>jobQueue API</strong> also empowered other teams to use Spark without needing deep technical knowledge, making the system more accessible and collaborative.
<img decoding="async" loading="lazy" alt="time-spend-chart" src="https://docs.uuboyscy.dev/zh-Hant/assets/images/time-spend-chart-bb6f59f398482fe28eef163096a65d90.png" width="552" height="372" class="img_ev3q"></p>
<hr>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="6-what-i-learned">6. What I Learned<a href="https://docs.uuboyscy.dev/zh-Hant/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing#6-what-i-learned" class="hash-link" aria-label="6. What I Learned的直接連結" title="6. What I Learned的直接連結">​</a></h2>
<p>Here are some important lessons from this project:</p>
<ul>
<li><strong>Small Changes Can Help</strong>: Switching to Spark and combining queries made a huge difference in performance and efficiency.</li>
<li><strong>Use the Right Tool</strong>: Spark's features like in-memory processing and parallel execution were perfect for our workload.</li>
<li><strong>Be Efficient</strong>: Designing the system to execute multiple SQL queries in a single task saved both time and resources.</li>
</ul>
<p>These lessons highlight the importance of choosing the right approach and tools when working with big data.</p>]]></content:encoded>
            <category>Hadoop</category>
            <category>Spark</category>
        </item>
        <item>
            <title><![CDATA[歡迎]]></title>
            <link>https://docs.uuboyscy.dev/zh-Hant/blog/welcome</link>
            <guid>https://docs.uuboyscy.dev/zh-Hant/blog/welcome</guid>
            <pubDate>Fri, 11 Dec 1992 00:00:00 GMT</pubDate>
            <description><![CDATA[嗨，大家好！歡迎來到我的第一篇部落格文章！🎉]]></description>
            <content:encoded><![CDATA[<p>嗨，大家好！歡迎來到我的第一篇部落格文章！🎉</p>
<p>我非常興奮能通過這個平台開始與大家分享我的想法和經驗。作為一個熱愛科技和程式設計的人，我覺得是時候在網路上為自己劃出一個小天地了。</p>
<p>有趣的是，我花了太多時間糾結第一篇文章該寫什麼內容。應該寫技術相關的？個人經歷？還是兩者結合？最後，我決定做自己，寫下任何腦海中浮現的東西。</p>
<p>我在科技領域工作了一段時間，總有新東西可以學習。無論是新的程式語言、一個酷炫的框架，還是一個有趣的設計模式，學習的腳步從未停止。這正是我熱愛這個領域的原因！</p>
<p>這裡是一份我目前感到興奮的事情的清單：</p>
<ul>
<li>探索新技術</li>
<li>與社群分享知識</li>
<li>從別人的經驗中學習</li>
</ul>
<p>我計劃撰寫以下主題：</p>
<ol>
<li>技術教學</li>
<li>程式設計的技巧和秘訣</li>
<li>在科技領域的個人經驗</li>
<li>關於軟體開發的隨想</li>
</ol>
<p>請持續關注更多文章！如果你想討論任何與科技相關的話題（或者只是想打個招呼），歡迎隨時聯繫我！</p>
<p>祝大家寫程式愉快！💻</p>]]></content:encoded>
            <category>Hello</category>
            <category>Docusaurus</category>
        </item>
    </channel>
</rss>