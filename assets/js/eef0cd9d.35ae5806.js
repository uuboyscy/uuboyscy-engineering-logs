"use strict";(self.webpackChunkuuboyscy_engineering_logs=self.webpackChunkuuboyscy_engineering_logs||[]).push([[2785],{3542:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>a});var t=r(845),i=r(4848),o=r(8453);const s={slug:"from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow",title:"From Airflow to Prefect: Choosing the Right Orchestration Tool for Your Workflow",authors:["uuboyscy"],tags:["gcp","airflow","prefect"]},l="From Airflow to Prefect: Choosing the Right Orchestration Tool for Your Workflow",d={authorsImageUrls:[void 0]},a=[{value:"1. Introduction",id:"1-introduction",level:2},{value:"2. The Problem",id:"2-the-problem",level:2},{value:"3. Why Airflow Wasn\u2019t Ideal",id:"3-why-airflow-wasnt-ideal",level:2},{value:"4. Why Prefect Was the Solution",id:"4-why-prefect-was-the-solution",level:2},{value:"5. Steps to Transition",id:"5-steps-to-transition",level:2},{value:"6. Prefect vs. Airflow",id:"6-prefect-vs-airflow",level:2},{value:"7. Airflow Code vs. Prefect Code: A Comparison",id:"7-airflow-code-vs-prefect-code-a-comparison",level:2},{value:"Key Differences",id:"key-differences",level:3},{value:"8. Conclusion",id:"8-conclusion",level:2}];function c(e){const n={code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,i.jsx)(n.p,{children:"In my role at a traditional company undergoing digital transformation, I faced a common challenge: managing multiple pipelines across Windows and Linux. These pipelines, essential for generating daily dashboard reports, were difficult to monitor, debug, and scale."}),"\n",(0,i.jsx)(n.p,{children:"While Airflow is a popular choice for orchestration, it didn\u2019t fit well for our diverse team of engineers and analysts. Prefect, on the other hand, addressed our specific needs with its flexibility and user-friendly features."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-the-problem",children:"2. The Problem"}),"\n",(0,i.jsx)(n.p,{children:"Our challenges included:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manual Execution"}),": Pipelines on Windows ",(0,i.jsx)(n.code,{children:"ran manually"}),", while Linux relied on ",(0,i.jsx)(n.code,{children:"crontab"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitoring Issues"}),": No centralized way to monitor or trace errors."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complexity for Analysts"}),": Analysts, skilled in SQL but less in Python, found it hard to contribute."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Adding new workers was cumbersome."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-why-airflow-wasnt-ideal",children:"3. Why Airflow Wasn\u2019t Ideal"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Steep Learning Curve"}),": Difficult for non-engineers to understand and use."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Windows Support"}),": Running Airflow on Windows required workarounds."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scaling Issues"}),": Adding workers or scaling pipelines needed manual effort."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-why-prefect-was-the-solution",children:"4. Why Prefect Was the Solution"}),"\n",(0,i.jsx)(n.p,{children:"Prefect solved our problems by offering:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User-Friendly Syntax"}),": Pythonic workflows easy for both engineers and analysts."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Platform Support"}),": Worked seamlessly on both Windows and Linux."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real-Time Monitoring"}),": Built-in logging and error handling for quick debugging."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy Scaling"}),": Agents simplified adding more workers as needed."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"5-steps-to-transition",children:"5. Steps to Transition"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analyze Existing Pipelines"}),": Identify workflows and dependencies."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set Up Prefect"}),": Install and configure Prefect for Windows and Linux."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Onboard Analysts"}),": Train analysts to contribute using SQL-friendly workflows."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Monitor and Debug"}),": Use Prefect\u2019s UI to track pipeline execution."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scale When Needed"}),": Deploy agents for additional capacity."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"6-prefect-vs-airflow",children:"6. Prefect vs. Airflow"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Airflow"}),(0,i.jsx)(n.th,{children:"Prefect"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ease of Use"})}),(0,i.jsx)(n.td,{children:"Complex for non-engineers"}),(0,i.jsx)(n.td,{children:"Intuitive and Pythonic"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Windows Support"})}),(0,i.jsx)(n.td,{children:"Limited"}),(0,i.jsx)(n.td,{children:"Excellent"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Monitoring"})}),(0,i.jsx)(n.td,{children:"Manual log tracing"}),(0,i.jsx)(n.td,{children:"Built-in tools"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Scalability"})}),(0,i.jsx)(n.td,{children:"Requires expertise"}),(0,i.jsx)(n.td,{children:"Simple agent setup"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"7-airflow-code-vs-prefect-code-a-comparison",children:"7. Airflow Code vs. Prefect Code: A Comparison"}),"\n",(0,i.jsxs)(n.p,{children:["Below is a side-by-side comparison of the same workflow implemented in ",(0,i.jsx)(n.code,{children:"Airflow"})," and ",(0,i.jsx)(n.code,{children:"Prefect"}),"."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Airflow code:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:"from datetime import datetime, timedelta\n\nfrom airflow import DAG\nfrom airflow.operators.bash import BashOperator\nfrom airflow.operators.python import PythonOperator\n\n\ndef task1():\n    print(\"Running Task 1\")\n\ndef task2():\n    print(\"Running Task 2\")\n\n# Default arguments for the DAG\ndefault_args = {\n    'owner': 'airflow',\n    'depends_on_past': False,\n    'email': ['your_email@example.com'],\n    'email_on_failure': False,\n    'email_on_retry': False,\n    'retries': 1,\n    'retry_delay': timedelta(minutes=5),\n}\n\n# Define the DAG\ndag = DAG(\n    'd_02_example_dag_dependency',\n    default_args=default_args,\n    description='An example DAG with Python operators',\n    schedule=\"* * * * *\",\n    start_date=datetime(2023, 1, 1),\n    catchup=False\n)\n\n# Define the tasks\ntask1_obj = PythonOperator(\n    task_id='task1',\n    python_callable=task1,\n    dag=dag,\n)\n\ntask2_obj = PythonOperator(\n    task_id='task2',\n    python_callable=task2,\n    dag=dag,\n)\n\ntask3_obj = BashOperator(\n    task_id='task3',\n    bash_command='echo \"Hello from Task 3!\"',\n    dag=dag,\n)\n\n# Task dependencies\ntask1_obj >> task2_obj\ntask1_obj >> task3_obj\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Prefect code:","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-Python",children:'from prefect import flow, task\nfrom prefect.tasks.shell import ShellOperation\n\n\n@task\ndef task1():\n    print("Running Task 1")\n\n\n@task\ndef task2():\n    print("Running Task 2")\n\n\n@flow(name="d_02_example_dag_dependency")\ndef example_flow():\n    # Define the tasks\n    t1 = task1()\n    t2 = task2()\n    t3 = ShellOperation(commands=["echo \'Hello from Task 3!\'"]).run()\n\n    # Set task dependencies\n    t2.wait_for(t1)\n    t3.wait_for(t1)\n\n\nif __name__ == "__main__":\n    example_flow()\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-differences",children:"Key Differences"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Airflow"}),(0,i.jsx)(n.th,{children:"Prefect"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Setup"})}),(0,i.jsx)(n.td,{children:"Requires defining a DAG explicitly."}),(0,i.jsx)(n.td,{children:"Uses Python functions and decorators."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Task Definition"})}),(0,i.jsx)(n.td,{children:"Separate task objects (Python/Bash)."}),(0,i.jsxs)(n.td,{children:["Python ",(0,i.jsx)(n.code,{children:"@task"})," decorator for simplicity."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Dependency Management"})}),(0,i.jsxs)(n.td,{children:["Explicit with ",(0,i.jsx)(n.code,{children:">>"})," and ",(0,i.jsx)(n.code,{children:"<<"})," operators."]}),(0,i.jsxs)(n.td,{children:["Handled with ",(0,i.jsx)(n.code,{children:".wait_for()"})," or function calls."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Execution"})}),(0,i.jsx)(n.td,{children:"Deployed to Airflow Scheduler."}),(0,i.jsx)(n.td,{children:"Runs as a Python script or with Prefect Cloud."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cross-Platform Support"})}),(0,i.jsx)(n.td,{children:"Limited for Windows."}),(0,i.jsx)(n.td,{children:"Cross-platform (Windows/Linux)."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"8-conclusion",children:"8. Conclusion"}),"\n",(0,i.jsx)(n.p,{children:"Prefect\u2019s simplicity, flexibility, and user-friendly design make it ideal for diverse teams and hybrid environments. By transitioning to Prefect, we unified our workflows, empowered analysts, and improved scalability\u2014proving that the right tool can transform the way we work."}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},845:e=>{e.exports=JSON.parse('{"permalink":"/blog/from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow","source":"@site/blog/2023-08-23-from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow/index.md","title":"From Airflow to Prefect: Choosing the Right Orchestration Tool for Your Workflow","description":"---","date":"2023-08-23T00:00:00.000Z","tags":[{"inline":false,"label":"GCP","permalink":"/blog/tags/gcp","description":"GCP tag description"},{"inline":false,"label":"Airflow","permalink":"/blog/tags/airflow","description":"Airflow tag description"},{"inline":false,"label":"Prefect","permalink":"/blog/tags/prefect","description":"Prefect tag description"}],"readingTime":3.34,"hasTruncateMarker":false,"authors":[{"name":"uuboyscy","title":"Data Engineer | Founder of uuboyscy.dev","url":"https://uuboyscy.dev","page":{"permalink":"/blog/authors/uuboyscy"},"socials":{"github":"https://github.com/uuboyscy","linkedin":"https://www.linkedin.com/in/chengyou-shi/"},"imageURL":"https://github.com/uuboyscy.png","key":"uuboyscy"}],"frontMatter":{"slug":"from-airflow-to-prefect-choosing-the-right-orchestration-tool-for-your-workflow","title":"From Airflow to Prefect: Choosing the Right Orchestration Tool for Your Workflow","authors":["uuboyscy"],"tags":["gcp","airflow","prefect"]},"unlisted":false,"prevItem":{"title":"From Traditional Data Platforms to Modern Data Middle Platforms","permalink":"/blog/from-traditional-data-platforms-to-modern-data-middle-platforms"},"nextItem":{"title":"From MapReduce to Spark: The Evolution of Big Data Processing","permalink":"/blog/from-mapreduce-to-spark-the-evolution-of-big-data-processing"}}')}}]);