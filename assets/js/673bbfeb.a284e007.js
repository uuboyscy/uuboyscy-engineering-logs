"use strict";(self.webpackChunkuuboyscy_engineering_logs=self.webpackChunkuuboyscy_engineering_logs||[]).push([[1364],{5677:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"Docker/docker-tutorial/Docker Commands 3d647e8d520b4df89d13c398586cfb51","title":"Docker Commands","description":"Download Docker image","source":"@site/docs/Docker/docker-tutorial/Docker Commands 3d647e8d520b4df89d13c398586cfb51.md","sourceDirName":"Docker/docker-tutorial","slug":"/Docker/docker-tutorial/Docker Commands 3d647e8d520b4df89d13c398586cfb51","permalink":"/,/docs/Docker/docker-tutorial/Docker Commands 3d647e8d520b4df89d13c398586cfb51","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Common Commands","permalink":"/,/docs/Docker/docker-tutorial/Common Commands 6354621f62cf44d98261afd5e92bca64"},"next":{"title":"Docker compose","permalink":"/,/docs/Docker/docker-tutorial/Docker compose f0ae267025e140ffb6d5ece8f412ec98"}}');var o=t(4848),r=t(8453);const s={},a="Docker Commands",c={},l=[{value:"Download Docker image",id:"download-docker-image",level:3},{value:"Build Docker container",id:"build-docker-container",level:3},{value:"Check containers status",id:"check-containers-status",level:3},{value:"Manipulate container",id:"manipulate-container",level:3}];function d(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"docker-commands",children:"Docker Commands"})}),"\n",(0,o.jsx)(n.h1,{id:"commands",children:"Commands"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker --help\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Usage:  docker [OPTIONS] COMMAND\n\nA self-sufficient runtime for containers\n\nCommon Commands:\n  run         Create and run a new container from an image\n  exec        Execute a command in a running container\n  ps          List containers\n  build       Build an image from a Dockerfile\n  pull        Download an image from a registry\n  push        Upload an image to a registry\n  images      List images\n  login       Log in to a registry\n  logout      Log out from a registry\n  search      Search Docker Hub for images\n  version     Show the Docker version information\n  info        Display system-wide information\n\nManagement Commands:\n  builder     Manage builds\n  buildx*     Docker Buildx (Docker Inc., v0.11.2)\n  compose*    Docker Compose (Docker Inc., v2.21.0)\n  container   Manage containers\n  context     Manage contexts\n  image       Manage images\n  manifest    Manage Docker image manifests and manifest lists\n  network     Manage networks\n  plugin      Manage plugins\n  system      Manage Docker\n  trust       Manage trust on Docker images\n  volume      Manage volumes\n\nSwarm Commands:\n  swarm       Manage Swarm\n\nCommands:\n  attach      Attach local standard input, output, and error streams to a running container\n  commit      Create a new image from a container's changes\n  cp          Copy files/folders between a container and the local filesystem\n  create      Create a new container\n  diff        Inspect changes to files or directories on a container's filesystem\n  events      Get real time events from the server\n  export      Export a container's filesystem as a tar archive\n  history     Show the history of an image\n  import      Import the contents from a tarball to create a filesystem image\n  inspect     Return low-level information on Docker objects\n  kill        Kill one or more running containers\n  load        Load an image from a tar archive or STDIN\n  logs        Fetch the logs of a container\n  pause       Pause all processes within one or more containers\n  port        List port mappings or a specific mapping for the container\n  rename      Rename a container\n  restart     Restart one or more containers\n  rm          Remove one or more containers\n  rmi         Remove one or more images\n  save        Save one or more images to a tar archive (streamed to STDOUT by default)\n  start       Start one or more stopped containers\n  stats       Display a live stream of container(s) resource usage statistics\n  stop        Stop one or more running containers\n  tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE\n  top         Display the running processes of a container\n  unpause     Unpause all processes within one or more containers\n  update      Update configuration of one or more containers\n  wait        Block until one or more containers stop, then print their exit codes\n"})}),"\n",(0,o.jsx)(n.h1,{id:"common-commands",children:"Common commands"}),"\n",(0,o.jsx)(n.h3,{id:"download-docker-image",children:"Download Docker image"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["The   ",(0,o.jsx)(n.code,{children:":"}),"   symbol followed by ",(0,o.jsx)(n.code,{children:"tag"})," is used to specify version of image"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker pull python:3.11-slim-bullseye\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:["Default to ",(0,o.jsx)(n.code,{children:"latest"})," if no  ",(0,o.jsx)(n.code,{children:":"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker pull python\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Untitled",src:t(5183).A+"",width:"1392",height:"450"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"build-docker-container",children:"Build Docker container"}),"\n",(0,o.jsxs)(n.p,{children:["Following steps executed using uuboyscy/docker-tutorial",":latest"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Build container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker run -it -d -p 50000:5000 --name docker-tutorial-web uuboyscy/docker-tutorial:latest\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Untitled",src:t(2342).A+"",width:"1264",height:"112"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Command usage:"}),"\n",(0,o.jsx)(n.p,{children:"docker run [OPTIONS] IMAGE [COMMAND] [ARG...]"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"OPTIONS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Options:\n      --add-host list                  Add a custom host-to-IP mapping (host:ip)\n      --annotation map                 Add an annotation to the container (passed through to the OCI runtime) (default map[])\n  -a, --attach list                    Attach to STDIN, STDOUT or STDERR\n      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)\n      --blkio-weight-device list       Block IO weight (relative device weight) (default [])\n      --cap-add list                   Add Linux capabilities\n      --cap-drop list                  Drop Linux capabilities\n      --cgroup-parent string           Optional parent cgroup for the container\n      --cgroupns string                Cgroup namespace to use (host|private)\n                                       'host':    Run the container in the Docker host's cgroup namespace\n                                       'private': Run the container in its own private cgroup namespace\n                                       '':        Use the cgroup namespace as configured by the\n                                                  default-cgroupns-mode option on the daemon (default)\n      --cidfile string                 Write the container ID to the file\n      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period\n      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota\n      --cpu-rt-period int              Limit CPU real-time period in microseconds\n      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds\n  -c, --cpu-shares int                 CPU shares (relative weight)\n      --cpus decimal                   Number of CPUs\n      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)\n      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)\n  -d, --detach                         Run container in background and print container ID\n      --detach-keys string             Override the key sequence for detaching a container\n      --device list                    Add a host device to the container\n      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list\n      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])\n      --device-read-iops list          Limit read rate (IO per second) from a device (default [])\n      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])\n      --device-write-iops list         Limit write rate (IO per second) to a device (default [])\n      --disable-content-trust          Skip image verification (default true)\n      --dns list                       Set custom DNS servers\n      --dns-option list                Set DNS options\n      --dns-search list                Set custom DNS search domains\n      --domainname string              Container NIS domain name\n      --entrypoint string              Overwrite the default ENTRYPOINT of the image\n  -e, --env list                       Set environment variables\n      --env-file list                  Read in a file of environment variables\n      --expose list                    Expose a port or a range of ports\n      --gpus gpu-request               GPU devices to add to the container ('all' to pass all GPUs)\n      --group-add list                 Add additional groups to join\n      --health-cmd string              Command to run to check health\n      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)\n      --health-retries int             Consecutive failures needed to report unhealthy\n      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)\n      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)\n      --help                           Print usage\n  -h, --hostname string                Container host name\n      --init                           Run an init inside the container that forwards signals and reaps processes\n  -i, --interactive                    Keep STDIN open even if not attached\n      --ip string                      IPv4 address (e.g., 172.30.100.104)\n      --ip6 string                     IPv6 address (e.g., 2001:db8::33)\n      --ipc string                     IPC mode to use\n      --isolation string               Container isolation technology\n      --kernel-memory bytes            Kernel memory limit\n  -l, --label list                     Set meta data on a container\n      --label-file list                Read in a line delimited file of labels\n      --link list                      Add link to another container\n      --link-local-ip list             Container IPv4/IPv6 link-local addresses\n      --log-driver string              Logging driver for the container\n      --log-opt list                   Log driver options\n      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)\n  -m, --memory bytes                   Memory limit\n      --memory-reservation bytes       Memory soft limit\n      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap\n      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)\n      --mount mount                    Attach a filesystem mount to the container\n      --name string                    Assign a name to the container\n      --network network                Connect a container to a network\n      --network-alias list             Add network-scoped alias for the container\n      --no-healthcheck                 Disable any container-specified HEALTHCHECK\n      --oom-kill-disable               Disable OOM Killer\n      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)\n      --pid string                     PID namespace to use\n      --pids-limit int                 Tune container pids limit (set -1 for unlimited)\n      --platform string                Set platform if server is multi-platform capable\n      --privileged                     Give extended privileges to this container\n  -p, --publish list                   Publish a container's port(s) to the host\n  -P, --publish-all                    Publish all exposed ports to random ports\n      --pull string                    Pull image before running (\"always\", \"missing\", \"never\") (default \"missing\")\n  -q, --quiet                          Suppress the pull output\n      --read-only                      Mount the container's root filesystem as read only\n      --restart string                 Restart policy to apply when a container exits (default \"no\")\n      --rm                             Automatically remove the container when it exits\n      --runtime string                 Runtime to use for this container\n      --security-opt list              Security Options\n      --shm-size bytes                 Size of /dev/shm\n      --sig-proxy                      Proxy received signals to the process (default true)\n      --stop-signal string             Signal to stop the container\n      --stop-timeout int               Timeout (in seconds) to stop a container\n      --storage-opt list               Storage driver options for the container\n      --sysctl map                     Sysctl options (default map[])\n      --tmpfs list                     Mount a tmpfs directory\n  -t, --tty                            Allocate a pseudo-TTY\n      --ulimit ulimit                  Ulimit options (default [])\n  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])\n      --userns string                  User namespace to use\n      --uts string                     UTS namespace to use\n  -v, --volume list                    Bind mount a volume\n      --volume-driver string           Optional volume driver for the container\n      --volumes-from list              Mount volumes from the specified container(s)\n  -w, --workdir string                 Working directory inside the container\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Common OPTIONS"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"-i, --interactive                    Keep STDIN open even if not attached\n-t, --tty                            Allocate a pseudo-TTY\n-d, --detach                         Run container in background and print container ID\n-v, --volume list                    Bind mount a volume\n-P, --publish-all                    Publish all exposed ports to random ports\n-e, --env list                       Set environment variable\n    --network network                Connect a container to a network\n    --name string                    Assign a name to the container\n"})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"check-containers-status",children:"Check containers status"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Check containers status"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker ps\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Untitled",src:t(6317).A+"",width:"1938",height:"138"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CONTAINER ID"}),": The unique identifier of the container, which is a a hexadecimal string of 64 characters. It can be used to operate on the specified container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"IMAGE"}),": The name of the image used to create the container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"COMMAND"}),": The command executed when the container starts (Entry point). It's usually a startup script or a specified application."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"CREATED"}),": The time when the container was created."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"STATUS"}),": The current status of the container. Common statuses include ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Up"})})," (running), ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Exited"})})," (stopped), and ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Restarting"})})," ."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"PORTS"}),": A port on the host machine can be mapped to a port on the container to allow external access to an application inside the container."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"NAMES"}),": The name of the container. Docker automatically generates a random name, but you can specify a name at container creation time using the ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"--name"})})," option."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"manipulate-container",children:"Manipulate container"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Enter container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker exec -it docker-tutorial zsh\ndocker exec -it docker-tutorial /bin/bash\ndocker exec -it docker-tutorial bash\ndocker exec -it docker-tutorial sh\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Untitled",src:t(2420).A+"",width:"1182",height:"108"})}),"\n",(0,o.jsx)(n.p,{children:"You will notice that cursor displayed on terminal changed"}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Exit container"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.code,{children:"CTRL + D"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Files transfer"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Usage:  docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH\n\tdocker cp [OPTIONS] SRC_PATH CONTAINER:DEST_PATH\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Check container logs"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"Usage:  docker logs [OPTIONS] CONTAINER\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Stop container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:" docker stop docker-tutorial\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"Remove container"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"docker rm docker-tutorial\n"})}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsx)(n.p,{children:"List all container ID"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker ps -aq\n"})}),"\n"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2342:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Untitled 1-2b0affaebdbbbbada0fdb83ebeebcd51.png"},6317:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Untitled 2-d4b7c47a365a1de107024cccbd2c198f.png"},2420:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Untitled 3-711880c09ced4dd480b9c2139207304c.png"},5183:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/Untitled-4c082510297da3aa3c7423fe03a5a484.png"},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(6540);const o={},r=i.createContext(o);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);